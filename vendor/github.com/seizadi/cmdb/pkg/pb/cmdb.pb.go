// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/cmdb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/seizadi/cmdb/pkg/pb/cmdb.proto

It has these top-level messages:
	Region
	CreateRegionRequest
	CreateRegionResponse
	ReadRegionRequest
	ReadRegionResponse
	UpdateRegionRequest
	UpdateRegionResponse
	DeleteRegionRequest
	DeleteRegionResponse
	ListRegionRequest
	ListRegionsResponse
	VersionResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Region represents a particular AWS Region
type Region struct {
	// The contact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the region
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the region
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Region) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Region) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateRegionRequest struct {
	Payload *Region `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateRegionRequest) Reset()                    { *m = CreateRegionRequest{} }
func (m *CreateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionRequest) ProtoMessage()               {}
func (*CreateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateRegionResponse) Reset()                    { *m = CreateRegionResponse{} }
func (m *CreateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionResponse) ProtoMessage()               {}
func (*CreateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadRegionRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadRegionRequest) Reset()                    { *m = ReadRegionRequest{} }
func (m *ReadRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionRequest) ProtoMessage()               {}
func (*ReadRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadRegionResponse) Reset()                    { *m = ReadRegionResponse{} }
func (m *ReadRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionResponse) ProtoMessage()               {}
func (*ReadRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateRegionRequest struct {
	Payload *Region                     `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateRegionRequest) Reset()                    { *m = UpdateRegionRequest{} }
func (m *UpdateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionRequest) ProtoMessage()               {}
func (*UpdateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateRegionRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateRegionResponse) Reset()                    { *m = UpdateRegionResponse{} }
func (m *UpdateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionResponse) ProtoMessage()               {}
func (*UpdateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteRegionRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRegionRequest) Reset()                    { *m = DeleteRegionRequest{} }
func (m *DeleteRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionRequest) ProtoMessage()               {}
func (*DeleteRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteRegionResponse struct {
}

func (m *DeleteRegionResponse) Reset()                    { *m = DeleteRegionResponse{} }
func (m *DeleteRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionResponse) ProtoMessage()               {}
func (*DeleteRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ListRegionRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListRegionRequest) Reset()                    { *m = ListRegionRequest{} }
func (m *ListRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionRequest) ProtoMessage()               {}
func (*ListRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListRegionRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListRegionRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListRegionRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListRegionsResponse struct {
	Results []*Region              `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListRegionsResponse) GetResults() []*Region {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListRegionsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*Region)(nil), "api.cmdb.Region")
	proto.RegisterType((*CreateRegionRequest)(nil), "api.cmdb.CreateRegionRequest")
	proto.RegisterType((*CreateRegionResponse)(nil), "api.cmdb.CreateRegionResponse")
	proto.RegisterType((*ReadRegionRequest)(nil), "api.cmdb.ReadRegionRequest")
	proto.RegisterType((*ReadRegionResponse)(nil), "api.cmdb.ReadRegionResponse")
	proto.RegisterType((*UpdateRegionRequest)(nil), "api.cmdb.UpdateRegionRequest")
	proto.RegisterType((*UpdateRegionResponse)(nil), "api.cmdb.UpdateRegionResponse")
	proto.RegisterType((*DeleteRegionRequest)(nil), "api.cmdb.DeleteRegionRequest")
	proto.RegisterType((*DeleteRegionResponse)(nil), "api.cmdb.DeleteRegionResponse")
	proto.RegisterType((*ListRegionRequest)(nil), "api.cmdb.ListRegionRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "api.cmdb.ListRegionsResponse")
	proto.RegisterType((*VersionResponse)(nil), "api.cmdb.VersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Regions service

type RegionsClient interface {
	// Use this method to create a contact information.
	Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	// Use this method to read a contact information by identifier.
	Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error)
	// Use this method to update a contact information.
	Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error)
	// Use this method to delete a particular contact.
	Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the contacts.
	List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
}

type regionsClient struct {
	cc *grpc.ClientConn
}

func NewRegionsClient(cc *grpc.ClientConn) RegionsClient {
	return &regionsClient{cc}
}

func (c *regionsClient) Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error) {
	out := new(ReadRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error) {
	out := new(UpdateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error) {
	out := new(DeleteRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Regions service

type RegionsServer interface {
	// Use this method to create a contact information.
	Create(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	// Use this method to read a contact information by identifier.
	Read(context.Context, *ReadRegionRequest) (*ReadRegionResponse, error)
	// Use this method to update a contact information.
	Update(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error)
	// Use this method to delete a particular contact.
	Delete(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the contacts.
	List(context.Context, *ListRegionRequest) (*ListRegionsResponse, error)
}

func RegisterRegionsServer(s *grpc.Server, srv RegionsServer) {
	s.RegisterService(&_Regions_serviceDesc, srv)
}

func _Regions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Create(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Read(ctx, req.(*ReadRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Update(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Delete(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).List(ctx, req.(*ListRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Regions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Regions",
	HandlerType: (*RegionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Regions_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Regions_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Regions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Regions_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Regions_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Cmdb service

type CmdbClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type cmdbClient struct {
	cc *grpc.ClientConn
}

func NewCmdbClient(cc *grpc.ClientConn) CmdbClient {
	return &cmdbClient{cc}
}

func (c *cmdbClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Cmdb/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cmdb service

type CmdbServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*VersionResponse, error)
}

func RegisterCmdbServer(s *grpc.Server, srv CmdbServer) {
	s.RegisterService(&_Cmdb_serviceDesc, srv)
}

func _Cmdb_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Cmdb/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Cmdb",
	HandlerType: (*CmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Cmdb_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

func init() { proto.RegisterFile("github.com/seizadi/cmdb/pkg/pb/cmdb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xee, 0x3a, 0x96, 0xe3, 0x9e, 0x52, 0x70, 0xc6, 0x69, 0xb0, 0x37, 0x29, 0x38, 0x8b, 0x90,
	0x42, 0x68, 0x76, 0x52, 0x83, 0x84, 0x94, 0x22, 0x94, 0x9f, 0x06, 0x54, 0xa0, 0xa8, 0x38, 0x05,
	0x89, 0xdc, 0x44, 0xb3, 0xde, 0xf1, 0x66, 0xc8, 0x7a, 0x67, 0x3a, 0x33, 0x0e, 0xb8, 0x88, 0x0b,
	0x78, 0x04, 0x78, 0x10, 0x2e, 0x51, 0x72, 0xc3, 0x43, 0x70, 0x87, 0x44, 0xaf, 0x78, 0x10, 0xb4,
	0xb3, 0xb3, 0xce, 0xfa, 0x27, 0x25, 0x11, 0x77, 0xb3, 0x73, 0xbe, 0xf3, 0x9d, 0xef, 0xfc, 0xed,
	0x2e, 0xbc, 0x13, 0x31, 0x7d, 0x3c, 0x08, 0xfc, 0x2e, 0xef, 0x63, 0x45, 0xd9, 0x73, 0x12, 0x32,
	0xdc, 0xed, 0x87, 0x01, 0x16, 0x27, 0x11, 0x16, 0x81, 0x39, 0xfb, 0x42, 0x72, 0xcd, 0x51, 0x95,
	0x08, 0xe6, 0xa7, 0xcf, 0xee, 0x72, 0xc4, 0x79, 0x14, 0x53, 0x6c, 0xee, 0x83, 0x41, 0x0f, 0xd3,
	0xbe, 0xd0, 0xc3, 0x0c, 0xe6, 0xb6, 0x26, 0x8d, 0x3d, 0x46, 0xe3, 0xf0, 0xa8, 0x4f, 0xd4, 0x89,
	0x45, 0xac, 0x58, 0x04, 0x11, 0x0c, 0x93, 0x24, 0xe1, 0x9a, 0x68, 0xc6, 0x13, 0x65, 0xad, 0x0f,
	0x0a, 0x8a, 0xe2, 0x61, 0x4f, 0x67, 0x44, 0xdd, 0x8d, 0x88, 0x26, 0x1b, 0xa7, 0x24, 0x66, 0x21,
	0xd1, 0x14, 0x4f, 0x1d, 0xac, 0xf3, 0xbd, 0x02, 0x58, 0x7d, 0x47, 0xa2, 0x88, 0x4a, 0xcc, 0x85,
	0xa1, 0x9f, 0x11, 0x6a, 0xab, 0x10, 0x8a, 0x25, 0x3d, 0x1e, 0xc4, 0xfc, 0x7b, 0x2e, 0x68, 0x52,
	0x0c, 0x19, 0x71, 0xd9, 0x1f, 0x51, 0xa4, 0x0f, 0xd6, 0xf7, 0xd3, 0xcb, 0x7c, 0x89, 0x8e, 0x89,
	0xda, 0x20, 0x42, 0x6c, 0x68, 0xce, 0xe3, 0x13, 0xa6, 0xf1, 0xb3, 0x01, 0x95, 0x43, 0xdc, 0xe5,
	0x71, 0x4c, 0xbb, 0x29, 0xcf, 0x11, 0x17, 0x54, 0x12, 0xcd, 0x65, 0xae, 0x63, 0xff, 0xea, 0x5c,
	0x52, 0x74, 0xb1, 0xa4, 0x8a, 0x0f, 0x64, 0x97, 0x8e, 0x0e, 0x96, 0xe6, 0xe9, 0x15, 0xd2, 0xc9,
	0x18, 0x8d, 0xa2, 0x8b, 0x6a, 0xe6, 0xe9, 0x99, 0xeb, 0xa3, 0x89, 0x92, 0x7e, 0x71, 0x65, 0xd6,
	0x29, 0x3e, 0x73, 0x3d, 0xc1, 0xe7, 0xfd, 0xe4, 0x40, 0xa5, 0x43, 0x23, 0xc6, 0x13, 0xf4, 0x01,
	0x94, 0x58, 0xd8, 0x70, 0x5a, 0xce, 0xda, 0xad, 0xf6, 0x1d, 0xdf, 0xa0, 0x7d, 0x29, 0xba, 0xfe,
	0xa3, 0x90, 0x26, 0x9a, 0xf5, 0x18, 0x95, 0xbb, 0xb5, 0xf3, 0xb3, 0xe6, 0x2b, 0x00, 0xa8, 0xa2,
	0xa8, 0x64, 0x24, 0x5e, 0x73, 0x3a, 0x25, 0x16, 0x22, 0x04, 0xe5, 0x84, 0xf4, 0x69, 0xa3, 0xd4,
	0x72, 0xd6, 0x6e, 0x76, 0xcc, 0x19, 0xb5, 0xe0, 0x56, 0x48, 0x55, 0x57, 0x32, 0x13, 0xbc, 0x31,
	0x67, 0x4c, 0xc5, 0xab, 0xad, 0xea, 0xf9, 0x59, 0xb3, 0x5c, 0x75, 0x5a, 0x8e, 0xb7, 0x03, 0xf5,
	0x3d, 0x49, 0x89, 0xa6, 0x99, 0x90, 0x0e, 0x7d, 0x36, 0xa0, 0x4a, 0xa3, 0x75, 0x98, 0x17, 0x64,
	0x18, 0x73, 0x92, 0x8b, 0xaa, 0xf9, 0xf9, 0xcc, 0xfb, 0x16, 0x99, 0x03, 0xbc, 0x6d, 0x58, 0x1c,
	0xa7, 0x50, 0x82, 0x27, 0x8a, 0xa2, 0x35, 0xa8, 0x48, 0xaa, 0x06, 0xb1, 0xbe, 0x94, 0xc2, 0xda,
	0x3d, 0x01, 0x0b, 0x1d, 0x4a, 0xc2, 0x71, 0x09, 0x6f, 0xff, 0x67, 0x49, 0x4c, 0x01, 0xde, 0x87,
	0x8a, 0x59, 0x2b, 0x65, 0x4a, 0x70, 0xab, 0xbd, 0xe2, 0xe7, 0xad, 0x31, 0xe1, 0x3e, 0x4e, 0x6d,
	0x07, 0xd4, 0xce, 0x5b, 0xc7, 0x62, 0xbd, 0x8f, 0x00, 0x15, 0x23, 0x5e, 0x5b, 0xf1, 0x00, 0xea,
	0x5f, 0x89, 0xf0, 0xff, 0x94, 0x0d, 0xb5, 0x27, 0x84, 0xbb, 0x7e, 0xf6, 0x32, 0xf0, 0xf3, 0xd7,
	0x45, 0xa6, 0xfd, 0x31, 0x51, 0x27, 0x23, 0xd9, 0xdb, 0xb0, 0x38, 0x1e, 0xf6, 0xda, 0xc2, 0x3f,
	0x84, 0xfa, 0x43, 0x1a, 0xd3, 0x49, 0xe1, 0x57, 0x2b, 0xb6, 0xb7, 0x04, 0x8b, 0xe3, 0xde, 0x59,
	0x7c, 0xef, 0x85, 0x03, 0x0b, 0x9f, 0x33, 0xa5, 0xc7, 0x49, 0x71, 0x9a, 0x61, 0xac, 0xa9, 0xb4,
	0xc4, 0xaf, 0x4f, 0xb6, 0x26, 0xb5, 0xb1, 0x24, 0xea, 0x58, 0x18, 0xda, 0x84, 0x2a, 0x97, 0x21,
	0x95, 0x47, 0xc1, 0xd0, 0x16, 0xe5, 0xce, 0xb8, 0xcb, 0x01, 0x97, 0x3a, 0x75, 0x98, 0x37, 0xb0,
	0xdd, 0x61, 0xa1, 0xfb, 0x73, 0x57, 0xef, 0x3e, 0xda, 0x84, 0x8a, 0x20, 0x11, 0x4b, 0xa2, 0x46,
	0xd9, 0x78, 0x35, 0xc6, 0xbd, 0x9e, 0xa4, 0x36, 0x92, 0x79, 0x64, 0x38, 0xaf, 0x0f, 0xf5, 0x8b,
	0xfc, 0xd4, 0xa8, 0xee, 0xeb, 0x30, 0x9f, 0xd5, 0x55, 0x35, 0x9c, 0xd6, 0xdc, 0xec, 0x7e, 0x5b,
	0x00, 0x5a, 0x87, 0xb2, 0x20, 0x11, 0xb5, 0x89, 0x2d, 0x4d, 0x85, 0xa4, 0x8f, 0x92, 0x1e, 0xef,
	0x18, 0x8c, 0xf7, 0x2e, 0xbc, 0xf6, 0x35, 0x95, 0xaa, 0xd8, 0xe2, 0x06, 0xcc, 0x9f, 0x66, 0x57,
	0xa6, 0x9a, 0x37, 0x3b, 0xf9, 0x63, 0xfb, 0xef, 0x32, 0xcc, 0x5b, 0x61, 0x28, 0x80, 0x4a, 0xb6,
	0x8b, 0xe8, 0xee, 0x85, 0x92, 0x19, 0x0b, 0xee, 0xbe, 0x71, 0x99, 0xd9, 0x76, 0xb4, 0xf9, 0xf3,
	0x9f, 0xff, 0xfc, 0x5a, 0xaa, 0x7b, 0x55, 0x2c, 0x33, 0xea, 0xad, 0xd1, 0xe0, 0x86, 0x50, 0x4e,
	0x77, 0x07, 0x2d, 0x17, 0x73, 0x9d, 0xd8, 0x5e, 0x77, 0x65, 0xb6, 0xd1, 0xb2, 0xaf, 0x1a, 0xf6,
	0x65, 0xd4, 0xcc, 0xd9, 0xf1, 0x0f, 0x2c, 0xf4, 0xf3, 0x97, 0xf8, 0x11, 0x0b, 0x7f, 0x44, 0xbf,
	0x39, 0x50, 0xc9, 0x66, 0xbd, 0x98, 0xca, 0x8c, 0xa5, 0x2b, 0xa6, 0x32, 0x6b, 0x39, 0xbc, 0xde,
	0x5f, 0x7f, 0x34, 0x4b, 0xd5, 0x1b, 0x26, 0xe4, 0xa1, 0xbb, 0x7a, 0x11, 0xd2, 0x26, 0xe4, 0x4f,
	0x84, 0x1e, 0x65, 0x7a, 0x78, 0xaf, 0x7d, 0x0d, 0x34, 0x3a, 0x85, 0x4a, 0xb6, 0x1c, 0x45, 0xc1,
	0x33, 0x96, 0xad, 0x28, 0x78, 0xe6, 0x36, 0x6d, 0x9c, 0x9f, 0x35, 0xab, 0xf9, 0xa7, 0x21, 0xab,
	0xd4, 0xfa, 0x4b, 0x2a, 0xf5, 0x14, 0xca, 0xe9, 0x6c, 0x16, 0xfb, 0x31, 0xb5, 0x8b, 0xee, 0xdd,
	0x59, 0xc6, 0xd1, 0x20, 0x7b, 0x35, 0x13, 0x06, 0xd0, 0xa8, 0xdd, 0xae, 0xfd, 0x44, 0xd4, 0x9c,
	0xf6, 0x37, 0x50, 0xde, 0xeb, 0x87, 0x01, 0xfa, 0x12, 0xe0, 0x13, 0xaa, 0xed, 0x5c, 0xa2, 0xa5,
	0xa9, 0xd7, 0xd5, 0x7e, 0xfa, 0xeb, 0xe3, 0x36, 0x2f, 0x02, 0x4d, 0x8c, 0x70, 0x21, 0x88, 0x1d,
	0xdd, 0xdd, 0x17, 0xce, 0x2f, 0x3b, 0xbf, 0x3b, 0xe8, 0x09, 0x94, 0xf7, 0x1e, 0x3f, 0xdc, 0xf5,
	0xf6, 0xe0, 0xf6, 0x01, 0x3f, 0xa6, 0x2c, 0x6e, 0xed, 0x9b, 0xff, 0x2f, 0xf4, 0xe6, 0xb1, 0xd6,
	0x42, 0x6d, 0x61, 0x7c, 0xc9, 0xbf, 0x99, 0xbb, 0x60, 0x9f, 0xb6, 0xa3, 0x3e, 0x61, 0x71, 0x6a,
	0x6f, 0xcf, 0xdd, 0xf7, 0x37, 0xbd, 0x32, 0x3e, 0xbd, 0x8f, 0xd7, 0x4b, 0x4e, 0xa9, 0x5d, 0x23,
	0x42, 0xc4, 0xac, 0x6b, 0xd6, 0x19, 0x7f, 0xab, 0x78, 0xb2, 0x35, 0x75, 0x73, 0xf8, 0x16, 0xac,
	0x02, 0xec, 0x08, 0xf6, 0x19, 0x1d, 0xee, 0x0c, 0xf4, 0x31, 0xaa, 0x57, 0x4b, 0xee, 0xed, 0xf4,
	0xc4, 0x25, 0x7b, 0x6e, 0x70, 0xad, 0x52, 0x50, 0x83, 0x57, 0xc7, 0x40, 0x37, 0x0e, 0x57, 0x5f,
	0xfe, 0xc7, 0xf8, 0x40, 0x04, 0x41, 0xc5, 0x54, 0xe7, 0xbd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x03, 0x87, 0xca, 0x73, 0x5d, 0x0a, 0x00, 0x00,
}
