syntax = "proto3";

package api.secops;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
//import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
import "github.com/infobloxopen/protoc-gen-atlas-query-validate/options/query_validate.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";

option go_package = "github.com/seizadi/secops/pkg/pb;pb";

// The SecOps service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "SECOPS";
    version: "1.0";
    contact: {
        name: "Soheil Eizadi";
        url: "https://github.com/seizadi/secops";
        email: "seizadi@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  base_path: "/v1/";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      };
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  };
};


// ---------------------------------
// SECOPS Application Version
// ---------------------------------
message VersionResponse {
  string version = 1;
}

service Secops {
  rpc GetVersion (google.protobuf.Empty) returns (VersionResponse) {
  // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }
}
{{range $r := . }}

// ------------------------------------------------------
// {{$r.NameCamel}} represents a particular AWS Region
// ------------------------------------------------------
message {{$r.NameCamel}} {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The {{$r.NameCamel}} identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the {{$r.NameCamel}}
  string name = 2;

  // The description of the {{$r.NameCamel}}
  string description = 3;
}

message Create{{$r.NameCamel}}Request {
  {{$r.NameCamel}} payload = 1;
}

message Create{{$r.NameCamel}}Response {
  {{$r.NameCamel}} result = 1;
}

message Read{{$r.NameCamel}}Request {
  atlas.rpc.Identifier id = 1;
  infoblox.api.FieldSelection fields = 2;
}

message Read{{$r.NameCamel}}Response {
  {{$r.NameCamel}} result = 1;
}

message Update{{$r.NameCamel}}Request {
  {{$r.NameCamel}} payload = 1;
  google.protobuf.FieldMask fields = 2;
}

message Update{{$r.NameCamel}}Response {
  {{$r.NameCamel}} result = 1;
}

message Delete{{$r.NameCamel}}Request {
  atlas.rpc.Identifier id = 1;
}

message Delete{{$r.NameCamel}}Response {}

message List{{$r.NameCamel}}Request {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message List{{$r.NameCamels}}Response {
  repeated {{$r.NameCamel}} results = 1;
  infoblox.api.PageInfo page = 2;
}

service {{$r.NameCamels}} {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

  // Use this method to create a {{$r.NameCamel}} information.
  rpc Create (Create{{$r.NameCamel}}Request) returns (Create{{$r.NameCamel}}Response) {
    option (google.api.http) = {
            post: "/{{$r.NameSnakes}}"
            body: "payload"
        };
  }

  // Use this method to read a {{$r.NameCamel}} information by identifier.
  rpc Read (Read{{$r.NameCamel}}Request) returns (Read{{$r.NameCamel}}Response) {
    option (google.api.http) = {
            get: "/{{$r.NameSnakes}}/{id.resource_id}"
        };
  }

  // Use this method to update a {{$r.NameCamel}} information.
  rpc Update (Update{{$r.NameCamel}}Request) returns (Update{{$r.NameCamel}}Response) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/{{$r.NameSnakes}}/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/{{$r.NameSnakes}}/{payload.id.resource_id}"
                body: "payload"
            }
    };
  }

  // Use this method to delete a particular {{$r.NameCamel}}.
  rpc Delete (Delete{{$r.NameCamel}}Request) returns (Delete{{$r.NameCamel}}Response) {
    option (google.api.http) = {
            delete: "/{{$r.NameSnakes}}/{id.resource_id}"
        };
    option (gorm.method).object_type = "{{$r.NameCamel}}";
  }

  // Use this method to retrieve all the {{$r.NameCamels}}.
  rpc List (List{{$r.NameCamel}}Request) returns (List{{$r.NameCamels}}Response) {
    option (google.api.http) = {
            get: "/{{$r.NameSnakes}}"
        };
  }
}
{{ end }}
